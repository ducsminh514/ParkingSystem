@page "/customers"
@using ParkingSystem.Shared.Models
@using ParkingSystem.Client.Services
@inject ParkingService ParkingService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Quản Lý Khách Hàng</PageTitle>

<h3>Danh Sách Khách Hàng</h3>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Đang tải...</span>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Tìm kiếm theo tên, SĐT, email..."
               @bind="searchKeyword" @bind:event="oninput" @onkeyup="OnSearch" />
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Tên</th>
                <th>Số Điện Thoại</th>
                <th>Email</th>
                <th>Địa Chỉ</th>
                <th>Số Xe</th>
                <th>Ngày Tạo</th>
                <th>Thao Tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.CustomerId</td>
                    <td>@customer.FullName</td>
                    <td>@customer.Phone</td>
                    <td>@customer.Email</td>
                    <td>@customer.Vehicles?.Count</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => ViewDetails(customer.CustomerId)">
                            Chi Tiết
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCustomer(customer.CustomerId)">
                            Xóa
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-3">
        <p>Tổng số khách hàng: <strong>@customers.Count</strong></p>
    </div>
}

@code {
    private List<Customer> customers = new();
    private string searchKeyword = string.Empty;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
	    try
	    {
		    isLoading = true;
		    Console.WriteLine("Starting initialization...");
        
		    await ParkingService.InitializeAsync();
		    Console.WriteLine("SignalR initialized successfully");

		    ParkingService.OnCustomerAdded += HandleCustomerAdded;
		    ParkingService.OnCustomerUpdated += HandleCustomerUpdated;
		    ParkingService.OnCustomerDeleted += HandleCustomerDeleted;

		    await LoadCustomers();
		    Console.WriteLine($"Loaded {customers.Count} customers");
	    }
	    catch (Exception ex)
	    {
		    Console.WriteLine($"ERROR: {ex.Message}");
		    Console.WriteLine($"Stack trace: {ex.StackTrace}");
		    errorMessage = $"Lỗi: {ex.Message}";
	    }
	    finally
	    {
		    isLoading = false;
	    }
    }

    private async Task LoadCustomers()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            customers = await ParkingService.GetAllCustomersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Không thể tải danh sách: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
     
    private async Task OnSearch()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchKeyword))
            {
                await LoadCustomers();
            }
            else
            {
                customers = await ParkingService.SearchCustomersAsync(searchKeyword);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi tìm kiếm: {ex.Message}";
        }
    }

    private async Task DeleteCustomer(Guid customerId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa khách hàng này?"))
        {
            try
            {
                await ParkingService.DeleteCustomerAsync(customerId);
                // Real-time update sẽ tự động xóa khỏi danh sách
            }
            catch (Exception ex)
            {
                errorMessage = $"Không thể xóa: {ex.Message}";
            }
        }
    }

    private void ViewDetails(Guid customerId)
    {
        // Navigate to detail page
        NavigationManager.NavigateTo($"/customers/{customerId}");
    }

    // ============ REAL-TIME EVENT HANDLERS ============
    private async Task HandleCustomerAdded(Customer customer)
    {
        customers.Insert(0, customer);
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleCustomerUpdated(Customer customer)
    {
        var index = customers.FindIndex(c => c.CustomerId == customer.CustomerId);
        if (index >= 0)
        {
            customers[index] = customer;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleCustomerDeleted(Guid customerId)
    {
        var customer = customers.FirstOrDefault(c => c.CustomerId == customerId);
        if (customer != null)
        {
            customers.Remove(customer);
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Unregister event handlers
        ParkingService.OnCustomerAdded -= HandleCustomerAdded;
        ParkingService.OnCustomerUpdated -= HandleCustomerUpdated;
        ParkingService.OnCustomerDeleted -= HandleCustomerDeleted;
    }
}